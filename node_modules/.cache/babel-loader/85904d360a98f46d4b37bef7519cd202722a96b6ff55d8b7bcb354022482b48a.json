{"ast":null,"code":"var _jsxFileName = \"/Users/v450/myphysiotherapist/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    painIntensity: '',\n    painLocation: ''\n  });\n  const [selectedExercises, setSelectedExercises] = useState([]);\n  const [finishedTherapies, setFinishedTherapies] = useState(0);\n  const [therapyHistory, setTherapyHistory] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  // Hardcoded exercises data\n  const exercises = {\n    kneePain: [{\n      name: \"Straight Leg Raise\",\n      description: \"Lie on your back, one leg bent and the other straight. Raise the straight leg slightly off the floor. Hold and then lower it back down.\"\n    }\n    // Add more exercises as needed\n    ],\n    shoulderPain: [{\n      name: \"Pendulum Stretch\",\n      description: \"Lean over slightly and let your affected arm hang down. Swing the arm gently in circles clockwise and counterclockwise.\"\n    }\n    // Add more exercises as needed\n    ],\n    backPain: [{\n      name: \"Cat-Cow Stretch\",\n      description: \"Get on your hands and knees. Arch your back towards the ceiling and hold, then dip it towards the floor and hold.\"\n    }\n    // Add more exercises as needed\n    ]\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        // Fetch user data from an API (you might need to adjust the endpoint)\n        const response = await axios.get('/api/user');\n        setUserData(response.data);\n        const randomExercises = getRandomExercises(response.data.painLocation);\n        setSelectedExercises(randomExercises);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        setError('Failed to fetch user data. Please try again.');\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    // Load therapy history from local storage when the component mounts\n    const storedTherapyHistory = JSON.parse(localStorage.getItem('therapyHistory')) || [];\n    setTherapyHistory(storedTherapyHistory);\n    setFinishedTherapies(storedTherapyHistory.length);\n  }, []);\n  const getRandomExercises = painLocation => {\n    // Get random exercises based on the pain location\n    const painType = painLocation.toLowerCase() + 'Pain';\n    const availableExercises = exercises[painType];\n    let selected = [];\n    while (selected.length < 3) {\n      const randomIndex = Math.floor(Math.random() * availableExercises.length);\n      const exercise = availableExercises[randomIndex];\n      if (!selected.some(e => e.name === exercise.name)) {\n        selected.push(exercise);\n      }\n    }\n    return selected;\n  };\n  const handleFinishTherapy = () => {\n    // Add today's therapy to history and save to local storage\n    const today = new Date().toLocaleDateString();\n    const todayExercises = selectedExercises.map(ex => ({\n      date: today,\n      name: ex.name,\n      description: ex.description\n    }));\n    const updatedTherapyHistory = [...therapyHistory, ...todayExercises];\n    localStorage.setItem('therapyHistory', JSON.stringify(updatedTherapyHistory));\n    setTherapyHistory(updatedTherapyHistory);\n    setFinishedTherapies(updatedTherapyHistory.length);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Today's Therapy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date: \", new Date().toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Pain Intensity: \", userData.painIntensity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Pain Location: \", userData.painLocation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recommended Exercises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedExercises.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: exercise.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this), \": \", exercise.description]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinishTherapy,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Finished Therapies: \", finishedTherapies]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"U9X+MODd5s0IMvNr8PAB3LPqi+s=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","navigate","userData","setUserData","painIntensity","painLocation","selectedExercises","setSelectedExercises","finishedTherapies","setFinishedTherapies","therapyHistory","setTherapyHistory","error","setError","loading","setLoading","exercises","kneePain","name","description","shoulderPain","backPain","fetchUserData","response","get","data","randomExercises","getRandomExercises","console","storedTherapyHistory","JSON","parse","localStorage","getItem","length","painType","toLowerCase","availableExercises","selected","randomIndex","Math","floor","random","exercise","some","e","push","handleFinishTherapy","today","Date","toLocaleDateString","todayExercises","map","ex","date","updatedTherapyHistory","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["/Users/v450/myphysiotherapist/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n    const navigate = useNavigate();\n    const [userData, setUserData] = useState({\n        painIntensity: '',\n        painLocation: ''\n    });\n    const [selectedExercises, setSelectedExercises] = useState([]);\n    const [finishedTherapies, setFinishedTherapies] = useState(0);\n    const [therapyHistory, setTherapyHistory] = useState([]);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(true);\n\n    // Hardcoded exercises data\n    const exercises = {\n        kneePain: [\n            { name: \"Straight Leg Raise\", description: \"Lie on your back, one leg bent and the other straight. Raise the straight leg slightly off the floor. Hold and then lower it back down.\" },\n            // Add more exercises as needed\n        ],\n        shoulderPain: [\n            { name: \"Pendulum Stretch\", description: \"Lean over slightly and let your affected arm hang down. Swing the arm gently in circles clockwise and counterclockwise.\" },\n            // Add more exercises as needed\n        ],\n        backPain: [\n            { name: \"Cat-Cow Stretch\", description: \"Get on your hands and knees. Arch your back towards the ceiling and hold, then dip it towards the floor and hold.\" },\n            // Add more exercises as needed\n        ]\n    };\n\n    useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n                // Fetch user data from an API (you might need to adjust the endpoint)\n                const response = await axios.get('/api/user');\n                setUserData(response.data);\n                const randomExercises = getRandomExercises(response.data.painLocation);\n                setSelectedExercises(randomExercises);\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching user data:', error);\n                setError('Failed to fetch user data. Please try again.');\n                setLoading(false);\n            }\n        };\n\n        fetchUserData();\n    }, []);\n\n    useEffect(() => {\n        // Load therapy history from local storage when the component mounts\n        const storedTherapyHistory = JSON.parse(localStorage.getItem('therapyHistory')) || [];\n        setTherapyHistory(storedTherapyHistory);\n        setFinishedTherapies(storedTherapyHistory.length);\n    }, []);\n\n    const getRandomExercises = (painLocation) => {\n        // Get random exercises based on the pain location\n        const painType = painLocation.toLowerCase() + 'Pain';\n        const availableExercises = exercises[painType];\n        let selected = [];\n        while (selected.length < 3) {\n            const randomIndex = Math.floor(Math.random() * availableExercises.length);\n            const exercise = availableExercises[randomIndex];\n            if (!selected.some(e => e.name === exercise.name)) {\n                selected.push(exercise);\n            }\n        }\n        return selected;\n    };\n\n    const handleFinishTherapy = () => {\n        // Add today's therapy to history and save to local storage\n        const today = new Date().toLocaleDateString();\n        const todayExercises = selectedExercises.map(ex => ({\n            date: today,\n            name: ex.name,\n            description: ex.description\n        }));\n        const updatedTherapyHistory = [...therapyHistory, ...todayExercises];\n        localStorage.setItem('therapyHistory', JSON.stringify(updatedTherapyHistory));\n        setTherapyHistory(updatedTherapyHistory);\n        setFinishedTherapies(updatedTherapyHistory.length);\n    };\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div>\n            <h1>Today's Therapy</h1>\n            <p>Date: {new Date().toLocaleDateString()}</p>\n            {error ? (\n                <p>{error}</p>\n            ) : (\n                <>\n                    <p>Pain Intensity: {userData.painIntensity}</p>\n                    <p>Pain Location: {userData.painLocation}</p>\n                    <h2>Recommended Exercises</h2>\n                    <ul>\n                        {selectedExercises.map((exercise, index) => (\n                            <li key={index}>\n                                <strong>{exercise.name}</strong>: {exercise.description}\n                            </li>\n                        ))}\n                    </ul>\n                    <button onClick={handleFinishTherapy}>Done</button>\n                    <p>Finished Therapies: {finishedTherapies}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Dashboard;\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}