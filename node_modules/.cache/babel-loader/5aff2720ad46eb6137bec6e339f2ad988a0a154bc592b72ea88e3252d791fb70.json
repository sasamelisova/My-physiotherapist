{"ast":null,"code":"var _jsxFileName = \"/Users/v450/myphysiotherapist/src/auth/ProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode'; // Corrected import statement\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const token = localStorage.getItem('token');\n\n  // Function to check if the token is expired\n  const isTokenExpired = token => {\n    try {\n      const {\n        exp\n      } = jwtDecode(token);\n      if (!exp) {\n        return false; // If there's no expiration field, assume non-expiring token\n      }\n      return Date.now() >= exp * 1000; // Check if current date is greater than exp\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return true; // Treat decoding errors as expired tokens\n    }\n  };\n\n  // Check for authentication token and its expiry\n  if (!token || isTokenExpired(token)) {\n    // Optionally clear the invalid or expired token from storage\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: \"expired\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this); // Inform login about the reason for redirection\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","ProtectedRoute","children","token","localStorage","getItem","isTokenExpired","exp","Date","now","error","console","removeItem","to","state","from","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/v450/myphysiotherapist/src/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';  // Corrected import statement\n\nconst ProtectedRoute = ({ children }) => {\n    const token = localStorage.getItem('token');\n\n    // Function to check if the token is expired\n    const isTokenExpired = (token) => {\n        try {\n            const { exp } = jwtDecode(token);\n            if (!exp) {\n                return false;  // If there's no expiration field, assume non-expiring token\n            }\n            return Date.now() >= exp * 1000;  // Check if current date is greater than exp\n        } catch (error) {\n            console.error('Error decoding token:', error);\n            return true; // Treat decoding errors as expired tokens\n        }\n    };\n\n    // Check for authentication token and its expiry\n    if (!token || isTokenExpired(token)) {\n        // Optionally clear the invalid or expired token from storage\n        localStorage.removeItem('token');\n        return <Navigate to=\"/login\" state={{ from: \"expired\" }} />; // Inform login about the reason for redirection\n    }\n\n    return children;\n};\n\nexport default ProtectedRoute;\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMC,cAAc,GAAIH,KAAK,IAAK;IAC9B,IAAI;MACA,MAAM;QAAEI;MAAI,CAAC,GAAGT,SAAS,CAACK,KAAK,CAAC;MAChC,IAAI,CAACI,GAAG,EAAE;QACN,OAAO,KAAK,CAAC,CAAE;MACnB;MACA,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIF,GAAG,GAAG,IAAI,CAAC,CAAE;IACtC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI,CAAC,CAAC;IACjB;EACJ,CAAC;;EAED;EACA,IAAI,CAACP,KAAK,IAAIG,cAAc,CAACH,KAAK,CAAC,EAAE;IACjC;IACAC,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOZ,OAAA,CAACH,QAAQ;MAACgB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAU;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACjE;EAEA,OAAOjB,QAAQ;AACnB,CAAC;AAACkB,EAAA,GAzBInB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}