{"ast":null,"code":"var _jsxFileName = \"/Users/v450/myphysiotherapist/src/auth/ProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode'; // npm install jwt-decode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const token = localStorage.getItem('token');\n\n  // Function to check if the token is expired\n  const isTokenExpired = token => {\n    try {\n      const {\n        exp\n      } = jwt_decode(token);\n      if (!exp) {\n        return false;\n      }\n      return Date.now() >= exp * 1000;\n    } catch {\n      return false;\n    }\n  };\n\n  // Check for authentication token and its expiry\n  if (!token || isTokenExpired(token)) {\n    // Optionally clear the invalid or expired token from storage\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwt_decode","jsxDEV","_jsxDEV","ProtectedRoute","children","token","localStorage","getItem","isTokenExpired","exp","Date","now","removeItem","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/v450/myphysiotherapist/src/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode'; // npm install jwt-decode\n\nconst ProtectedRoute = ({ children }) => {\n    const token = localStorage.getItem('token');\n    \n    // Function to check if the token is expired\n    const isTokenExpired = (token) => {\n        try {\n            const { exp } = jwt_decode(token);\n            if (!exp) {\n                return false;\n            }\n            return Date.now() >= exp * 1000;\n        } catch {\n            return false;\n        }\n    };\n\n    // Check for authentication token and its expiry\n    if (!token || isTokenExpired(token)) {\n        // Optionally clear the invalid or expired token from storage\n        localStorage.removeItem('token');\n        return <Navigate to=\"/login\" />;\n    }\n\n    return children;\n};\n\nexport default ProtectedRoute;\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,UAAU,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMC,cAAc,GAAIH,KAAK,IAAK;IAC9B,IAAI;MACA,MAAM;QAAEI;MAAI,CAAC,GAAGT,UAAU,CAACK,KAAK,CAAC;MACjC,IAAI,CAACI,GAAG,EAAE;QACN,OAAO,KAAK;MAChB;MACA,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIF,GAAG,GAAG,IAAI;IACnC,CAAC,CAAC,MAAM;MACJ,OAAO,KAAK;IAChB;EACJ,CAAC;;EAED;EACA,IAAI,CAACJ,KAAK,IAAIG,cAAc,CAACH,KAAK,CAAC,EAAE;IACjC;IACAC,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOV,OAAA,CAACH,QAAQ;MAACc,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;EAEA,OAAOb,QAAQ;AACnB,CAAC;AAACc,EAAA,GAxBIf,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}